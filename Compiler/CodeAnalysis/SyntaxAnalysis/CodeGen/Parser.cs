// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 4/11/2023 4:09:50 AM
// Input file <Language.y - 4/11/2023 4:09:45 AM>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Compiler.CodeAnalysis.SyntaxAnalysis
{
public enum Tokens {error=2,EOF=3,TkUnknown=4,TkIdentifier=5,TkBool=6,
    TkInt=7,TkReal=8,TkType=9,TkIs=10,TkEnd=11,TkReturn=12,
    TkVar=13,TkRoutine=14,TkFor=15,TkWhile=16,TkLoop=17,TkIn=18,
    TkReverse=19,TkIf=20,TkThen=21,TkElse=22,TkArray=23,TkRecord=24,
    TkRoundOpen=25,TkRoundClose=26,TkCurlyOpen=27,TkCurlyClose=28,TkSquareOpen=29,TkSquareClose=30,
    TkSemicolon=31,TkColon=32,TkComma=33,TkAssign=34,TkDot=35,TkMinus=36,
    TkPlus=37,TkMultiply=38,TkDivide=39,TkPercent=40,TkAnd=41,TkOr=42,
    TkXor=43,TkRange=44,TkLeq=45,TkGeq=46,TkLess=47,TkGreater=48,
    TkEqual=49,TkNotEqual=50,TkIntLiteral=51,TkRealLiteral=52,TkBoolLiteral=53};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[83];
  private static State[] states = new State[165];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "DeclarationList", "Declaration", "SimpleDeclaration", 
      "RoutineDeclaration", "VariableDeclaration", "TypeDeclaration", "Identifier", 
      "Type", "Expression", "VariableDeclarations", "Parameters", "Body", "ParameterDeclaration", 
      "PrimitiveType", "RecordType", "ArrayType", "Statement", "Assignment", 
      "RoutineCall", "WhileLoop", "ForLoop", "IfStatement", "ReturnStatement", 
      "ModifiablePrimary", "ExpressionList", "Range", "Relation", "Simple", "Factor", 
      "Summand", "Primary", };

  static Parser() {
    states[0] = new State(new int[]{13,8,9,89,14,95,3,-2},new int[]{-1,1,-3,3,-4,4,-5,6,-7,7,-8,87,-6,93});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{13,8,9,89,14,95,3,-5},new int[]{-3,5,-4,4,-5,6,-7,7,-8,87,-6,93});
    states[5] = new State(-4);
    states[6] = new State(-6);
    states[7] = new State(-8);
    states[8] = new State(new int[]{5,31},new int[]{-9,9});
    states[9] = new State(new int[]{32,10,10,84});
    states[10] = new State(new int[]{7,64,8,65,6,66,24,68,23,76,5,31},new int[]{-10,11,-16,63,-17,67,-18,75,-9,81});
    states[11] = new State(new int[]{10,12,31,62});
    states[12] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,13,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[13] = new State(new int[]{31,14,41,15,42,35,43,44});
    states[14] = new State(-10);
    states[15] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-29,16,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[16] = new State(-55);
    states[17] = new State(new int[]{47,18,38,20,39,48,40,50,45,52,48,54,46,56,49,58,50,60,31,-65,41,-65,42,-65,43,-65,30,-65,26,-65,33,-65,17,-65,21,-65,44,-65});
    states[18] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-30,19,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[19] = new State(new int[]{38,20,39,48,40,50,31,-59,41,-59,42,-59,43,-59,30,-59,26,-59,33,-59,17,-59,21,-59,44,-59});
    states[20] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-31,21,-32,46,-33,24,-26,28,-9,40});
    states[21] = new State(new int[]{36,22,37,38,47,-66,38,-66,39,-66,40,-66,45,-66,48,-66,46,-66,49,-66,50,-66,31,-66,41,-66,42,-66,43,-66,30,-66,26,-66,33,-66,17,-66,21,-66,44,-66});
    states[22] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-32,23,-33,24,-26,28,-9,40});
    states[23] = new State(-70);
    states[24] = new State(-73);
    states[25] = new State(-75);
    states[26] = new State(-76);
    states[27] = new State(-77);
    states[28] = new State(new int[]{35,29,29,32,36,-78,37,-78,47,-78,38,-78,39,-78,40,-78,45,-78,48,-78,46,-78,49,-78,50,-78,31,-78,41,-78,42,-78,43,-78,30,-78,26,-78,33,-78,17,-78,21,-78,44,-78});
    states[29] = new State(new int[]{5,31},new int[]{-9,30});
    states[30] = new State(-79);
    states[31] = new State(-82);
    states[32] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,33,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[33] = new State(new int[]{30,34,41,15,42,35,43,44});
    states[34] = new State(-80);
    states[35] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-29,36,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[36] = new State(-56);
    states[37] = new State(new int[]{36,22,37,38,47,-69,38,-69,39,-69,40,-69,45,-69,48,-69,46,-69,49,-69,50,-69,31,-69,41,-69,42,-69,43,-69,30,-69,26,-69,33,-69,17,-69,21,-69,44,-69});
    states[38] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-32,39,-33,24,-26,28,-9,40});
    states[39] = new State(-71);
    states[40] = new State(-81);
    states[41] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,42,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[42] = new State(new int[]{26,43,41,15,42,35,43,44});
    states[43] = new State(-74);
    states[44] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-29,45,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[45] = new State(-57);
    states[46] = new State(-72);
    states[47] = new State(-58);
    states[48] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-31,49,-32,46,-33,24,-26,28,-9,40});
    states[49] = new State(new int[]{36,22,37,38,47,-67,38,-67,39,-67,40,-67,45,-67,48,-67,46,-67,49,-67,50,-67,31,-67,41,-67,42,-67,43,-67,30,-67,26,-67,33,-67,17,-67,21,-67,44,-67});
    states[50] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-31,51,-32,46,-33,24,-26,28,-9,40});
    states[51] = new State(new int[]{36,22,37,38,47,-68,38,-68,39,-68,40,-68,45,-68,48,-68,46,-68,49,-68,50,-68,31,-68,41,-68,42,-68,43,-68,30,-68,26,-68,33,-68,17,-68,21,-68,44,-68});
    states[52] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-30,53,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[53] = new State(new int[]{38,20,39,48,40,50,31,-60,41,-60,42,-60,43,-60,30,-60,26,-60,33,-60,17,-60,21,-60,44,-60});
    states[54] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-30,55,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[55] = new State(new int[]{38,20,39,48,40,50,31,-61,41,-61,42,-61,43,-61,30,-61,26,-61,33,-61,17,-61,21,-61,44,-61});
    states[56] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-30,57,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[57] = new State(new int[]{38,20,39,48,40,50,31,-62,41,-62,42,-62,43,-62,30,-62,26,-62,33,-62,17,-62,21,-62,44,-62});
    states[58] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-30,59,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[59] = new State(new int[]{38,20,39,48,40,50,31,-63,41,-63,42,-63,43,-63,30,-63,26,-63,33,-63,17,-63,21,-63,44,-63});
    states[60] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-30,61,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[61] = new State(new int[]{38,20,39,48,40,50,31,-64,41,-64,42,-64,43,-64,30,-64,26,-64,33,-64,17,-64,21,-64,44,-64});
    states[62] = new State(-11);
    states[63] = new State(-21);
    states[64] = new State(-25);
    states[65] = new State(-26);
    states[66] = new State(-27);
    states[67] = new State(-22);
    states[68] = new State(new int[]{27,69});
    states[69] = new State(new int[]{13,8},new int[]{-12,70,-7,73});
    states[70] = new State(new int[]{28,71});
    states[71] = new State(new int[]{11,72});
    states[72] = new State(-28);
    states[73] = new State(new int[]{13,8,28,-14},new int[]{-12,74,-7,73});
    states[74] = new State(-13);
    states[75] = new State(-23);
    states[76] = new State(new int[]{29,77});
    states[77] = new State(new int[]{30,82,51,25,52,26,53,27,5,31,25,41},new int[]{-11,78,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[78] = new State(new int[]{30,79,41,15,42,35,43,44});
    states[79] = new State(new int[]{7,64,8,65,6,66,24,68,23,76,5,31},new int[]{-10,80,-16,63,-17,67,-18,75,-9,81});
    states[80] = new State(-29);
    states[81] = new State(-24);
    states[82] = new State(new int[]{7,64,8,65,6,66,24,68,23,76,5,31},new int[]{-10,83,-16,63,-17,67,-18,75,-9,81});
    states[83] = new State(-30);
    states[84] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,85,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[85] = new State(new int[]{31,86,41,15,42,35,43,44});
    states[86] = new State(-12);
    states[87] = new State(new int[]{31,88});
    states[88] = new State(-9);
    states[89] = new State(new int[]{5,31},new int[]{-9,90});
    states[90] = new State(new int[]{10,91});
    states[91] = new State(new int[]{7,64,8,65,6,66,24,68,23,76,5,31},new int[]{-10,92,-16,63,-17,67,-18,75,-9,81});
    states[92] = new State(-15);
    states[93] = new State(new int[]{31,94});
    states[94] = new State(-7);
    states[95] = new State(new int[]{5,31},new int[]{-9,96});
    states[96] = new State(new int[]{25,97});
    states[97] = new State(new int[]{5,31},new int[]{-13,98,-15,159,-9,162});
    states[98] = new State(new int[]{26,99});
    states[99] = new State(new int[]{32,100,10,156});
    states[100] = new State(new int[]{7,64,8,65,6,66,24,68,23,76,5,31},new int[]{-10,101,-16,63,-17,67,-18,75,-9,81});
    states[101] = new State(new int[]{10,102});
    states[102] = new State(new int[]{13,8,9,89,5,31,16,121,15,127,20,134,12,142,11,-31},new int[]{-14,103,-5,144,-7,7,-8,87,-19,145,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[103] = new State(new int[]{11,104,13,8,9,89,5,31,16,121,15,127,20,134,12,142},new int[]{-5,105,-19,106,-7,7,-8,87,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[104] = new State(-16);
    states[105] = new State(-32);
    states[106] = new State(new int[]{31,107});
    states[107] = new State(-33);
    states[108] = new State(-36);
    states[109] = new State(new int[]{34,110,35,29,29,32});
    states[110] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,111,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[111] = new State(new int[]{41,15,42,35,43,44,31,-42});
    states[112] = new State(new int[]{25,113,34,-81,35,-81,29,-81,31,-44});
    states[113] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-27,114,-11,118,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[114] = new State(new int[]{26,115,33,116});
    states[115] = new State(-43);
    states[116] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,117,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[117] = new State(new int[]{41,15,42,35,43,44,26,-45,33,-45});
    states[118] = new State(new int[]{41,15,42,35,43,44,26,-46,33,-46});
    states[119] = new State(-37);
    states[120] = new State(-38);
    states[121] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,122,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[122] = new State(new int[]{17,123,41,15,42,35,43,44});
    states[123] = new State(new int[]{13,8,9,89,5,31,16,121,15,127,20,134,12,142,11,-31},new int[]{-14,124,-5,144,-7,7,-8,87,-19,145,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[124] = new State(new int[]{11,125,13,8,9,89,5,31,16,121,15,127,20,134,12,142},new int[]{-5,105,-19,106,-7,7,-8,87,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[125] = new State(-47);
    states[126] = new State(-39);
    states[127] = new State(new int[]{5,31},new int[]{-9,128});
    states[128] = new State(new int[]{18,148},new int[]{-28,129});
    states[129] = new State(new int[]{17,130});
    states[130] = new State(new int[]{13,8,9,89,5,31,16,121,15,127,20,134,12,142,11,-31},new int[]{-14,131,-5,144,-7,7,-8,87,-19,145,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[131] = new State(new int[]{11,132,13,8,9,89,5,31,16,121,15,127,20,134,12,142},new int[]{-5,105,-19,106,-7,7,-8,87,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[132] = new State(-48);
    states[133] = new State(-40);
    states[134] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,135,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[135] = new State(new int[]{21,136,41,15,42,35,43,44});
    states[136] = new State(new int[]{13,8,9,89,5,31,16,121,15,127,20,134,12,142,22,-31,11,-31},new int[]{-14,137,-5,144,-7,7,-8,87,-19,145,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[137] = new State(new int[]{22,138,11,147,13,8,9,89,5,31,16,121,15,127,20,134,12,142},new int[]{-5,105,-19,106,-7,7,-8,87,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[138] = new State(new int[]{13,8,9,89,5,31,16,121,15,127,20,134,12,142,11,-31},new int[]{-14,139,-5,144,-7,7,-8,87,-19,145,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[139] = new State(new int[]{11,140,13,8,9,89,5,31,16,121,15,127,20,134,12,142},new int[]{-5,105,-19,106,-7,7,-8,87,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[140] = new State(-51);
    states[141] = new State(-41);
    states[142] = new State(new int[]{51,25,52,26,53,27,5,31,25,41,31,-54},new int[]{-11,143,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[143] = new State(new int[]{41,15,42,35,43,44,31,-53});
    states[144] = new State(-34);
    states[145] = new State(new int[]{31,146});
    states[146] = new State(-35);
    states[147] = new State(-52);
    states[148] = new State(new int[]{19,149,51,25,52,26,53,27,5,31,25,41},new int[]{-11,153,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[149] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,150,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[150] = new State(new int[]{44,151,41,15,42,35,43,44});
    states[151] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,152,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[152] = new State(new int[]{41,15,42,35,43,44,17,-49});
    states[153] = new State(new int[]{44,154,41,15,42,35,43,44});
    states[154] = new State(new int[]{51,25,52,26,53,27,5,31,25,41},new int[]{-11,155,-29,47,-30,17,-31,37,-32,46,-33,24,-26,28,-9,40});
    states[155] = new State(new int[]{41,15,42,35,43,44,17,-50});
    states[156] = new State(new int[]{13,8,9,89,5,31,16,121,15,127,20,134,12,142,11,-31},new int[]{-14,157,-5,144,-7,7,-8,87,-19,145,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[157] = new State(new int[]{11,158,13,8,9,89,5,31,16,121,15,127,20,134,12,142},new int[]{-5,105,-19,106,-7,7,-8,87,-20,108,-26,109,-9,112,-21,119,-22,120,-23,126,-24,133,-25,141});
    states[158] = new State(-17);
    states[159] = new State(new int[]{33,160,26,-19});
    states[160] = new State(new int[]{5,31},new int[]{-13,161,-15,159,-9,162});
    states[161] = new State(-18);
    states[162] = new State(new int[]{32,163});
    states[163] = new State(new int[]{7,64,8,65,6,66,24,68,23,76,5,31},new int[]{-10,164,-16,63,-17,67,-18,75,-9,81});
    states[164] = new State(-20);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4,-3});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6,31});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-5, new int[]{-8,31});
    rules[10] = new Rule(-7, new int[]{13,-9,32,-10,10,-11,31});
    rules[11] = new Rule(-7, new int[]{13,-9,32,-10,31});
    rules[12] = new Rule(-7, new int[]{13,-9,10,-11,31});
    rules[13] = new Rule(-12, new int[]{-7,-12});
    rules[14] = new Rule(-12, new int[]{-7});
    rules[15] = new Rule(-8, new int[]{9,-9,10,-10});
    rules[16] = new Rule(-6, new int[]{14,-9,25,-13,26,32,-10,10,-14,11});
    rules[17] = new Rule(-6, new int[]{14,-9,25,-13,26,10,-14,11});
    rules[18] = new Rule(-13, new int[]{-15,33,-13});
    rules[19] = new Rule(-13, new int[]{-15});
    rules[20] = new Rule(-15, new int[]{-9,32,-10});
    rules[21] = new Rule(-10, new int[]{-16});
    rules[22] = new Rule(-10, new int[]{-17});
    rules[23] = new Rule(-10, new int[]{-18});
    rules[24] = new Rule(-10, new int[]{-9});
    rules[25] = new Rule(-16, new int[]{7});
    rules[26] = new Rule(-16, new int[]{8});
    rules[27] = new Rule(-16, new int[]{6});
    rules[28] = new Rule(-17, new int[]{24,27,-12,28,11});
    rules[29] = new Rule(-18, new int[]{23,29,-11,30,-10});
    rules[30] = new Rule(-18, new int[]{23,29,30,-10});
    rules[31] = new Rule(-14, new int[]{});
    rules[32] = new Rule(-14, new int[]{-14,-5});
    rules[33] = new Rule(-14, new int[]{-14,-19,31});
    rules[34] = new Rule(-14, new int[]{-5});
    rules[35] = new Rule(-14, new int[]{-19,31});
    rules[36] = new Rule(-19, new int[]{-20});
    rules[37] = new Rule(-19, new int[]{-21});
    rules[38] = new Rule(-19, new int[]{-22});
    rules[39] = new Rule(-19, new int[]{-23});
    rules[40] = new Rule(-19, new int[]{-24});
    rules[41] = new Rule(-19, new int[]{-25});
    rules[42] = new Rule(-20, new int[]{-26,34,-11});
    rules[43] = new Rule(-21, new int[]{-9,25,-27,26});
    rules[44] = new Rule(-21, new int[]{-9});
    rules[45] = new Rule(-27, new int[]{-27,33,-11});
    rules[46] = new Rule(-27, new int[]{-11});
    rules[47] = new Rule(-22, new int[]{16,-11,17,-14,11});
    rules[48] = new Rule(-23, new int[]{15,-9,-28,17,-14,11});
    rules[49] = new Rule(-28, new int[]{18,19,-11,44,-11});
    rules[50] = new Rule(-28, new int[]{18,-11,44,-11});
    rules[51] = new Rule(-24, new int[]{20,-11,21,-14,22,-14,11});
    rules[52] = new Rule(-24, new int[]{20,-11,21,-14,11});
    rules[53] = new Rule(-25, new int[]{12,-11});
    rules[54] = new Rule(-25, new int[]{12});
    rules[55] = new Rule(-11, new int[]{-11,41,-29});
    rules[56] = new Rule(-11, new int[]{-11,42,-29});
    rules[57] = new Rule(-11, new int[]{-11,43,-29});
    rules[58] = new Rule(-11, new int[]{-29});
    rules[59] = new Rule(-29, new int[]{-30,47,-30});
    rules[60] = new Rule(-29, new int[]{-30,45,-30});
    rules[61] = new Rule(-29, new int[]{-30,48,-30});
    rules[62] = new Rule(-29, new int[]{-30,46,-30});
    rules[63] = new Rule(-29, new int[]{-30,49,-30});
    rules[64] = new Rule(-29, new int[]{-30,50,-30});
    rules[65] = new Rule(-29, new int[]{-30});
    rules[66] = new Rule(-30, new int[]{-30,38,-31});
    rules[67] = new Rule(-30, new int[]{-30,39,-31});
    rules[68] = new Rule(-30, new int[]{-30,40,-31});
    rules[69] = new Rule(-30, new int[]{-31});
    rules[70] = new Rule(-31, new int[]{-31,36,-32});
    rules[71] = new Rule(-31, new int[]{-31,37,-32});
    rules[72] = new Rule(-31, new int[]{-32});
    rules[73] = new Rule(-32, new int[]{-33});
    rules[74] = new Rule(-32, new int[]{25,-11,26});
    rules[75] = new Rule(-33, new int[]{51});
    rules[76] = new Rule(-33, new int[]{52});
    rules[77] = new Rule(-33, new int[]{53});
    rules[78] = new Rule(-33, new int[]{-26});
    rules[79] = new Rule(-26, new int[]{-26,35,-9});
    rules[80] = new Rule(-26, new int[]{-26,29,-11,30});
    rules[81] = new Rule(-26, new int[]{-9});
    rules[82] = new Rule(-9, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> /* empty */
#line 86 "Language.y"
              { var node = new ProgramNode(); CurrentSemanticValue = node; SaveTree(node); }
#line default
        break;
      case 3: // Program -> DeclarationList
#line 87 "Language.y"
                  { var node = new ProgramNode((ListNode<DeclarationNode>)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = node; SaveTree(node); }
#line default
        break;
      case 4: // DeclarationList -> Declaration, DeclarationList
#line 92 "Language.y"
                              { CurrentSemanticValue = new ListNode<DeclarationNode>((DeclarationNode)ValueStack[ValueStack.Depth-2], (ListNode<DeclarationNode>?)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 5: // DeclarationList -> Declaration
#line 93 "Language.y"
              { CurrentSemanticValue = new ListNode<DeclarationNode>((DeclarationNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 10: // VariableDeclaration -> TkVar, Identifier, TkColon, Type, TkIs, Expression, 
               //                        TkSemicolon
#line 108 "Language.y"
                                                            { CurrentSemanticValue = new VariableDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-6], (TypeNode)ValueStack[ValueStack.Depth-4], (ExpressionNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 11: // VariableDeclaration -> TkVar, Identifier, TkColon, Type, TkSemicolon
#line 109 "Language.y"
                                            { CurrentSemanticValue = new VariableDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-4], (TypeNode)ValueStack[ValueStack.Depth-2], null); }
#line default
        break;
      case 12: // VariableDeclaration -> TkVar, Identifier, TkIs, Expression, TkSemicolon
#line 110 "Language.y"
                                               { CurrentSemanticValue = new VariableDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-4], null, (ExpressionNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 13: // VariableDeclarations -> VariableDeclaration, VariableDeclarations
#line 114 "Language.y"
                                           { CurrentSemanticValue = new ListNode<VariableDeclarationNode>((VariableDeclarationNode)ValueStack[ValueStack.Depth-2], (ListNode<VariableDeclarationNode>?)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 14: // VariableDeclarations -> VariableDeclaration
#line 115 "Language.y"
                      { CurrentSemanticValue = new ListNode<VariableDeclarationNode>((VariableDeclarationNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 15: // TypeDeclaration -> TkType, Identifier, TkIs, Type
#line 120 "Language.y"
                              { CurrentSemanticValue = new TypeDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-3], (TypeNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 16: // RoutineDeclaration -> TkRoutine, Identifier, TkRoundOpen, Parameters, 
               //                       TkRoundClose, TkColon, Type, TkIs, Body, TkEnd
#line 126 "Language.y"
    {
        CurrentSemanticValue = new RoutineDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-9], (TypeNode)ValueStack[ValueStack.Depth-4], (ListNode<ParameterDeclarationNode>)ValueStack[ValueStack.Depth-7], (BodyNode)ValueStack[ValueStack.Depth-2]);
    }
#line default
        break;
      case 17: // RoutineDeclaration -> TkRoutine, Identifier, TkRoundOpen, Parameters, 
               //                       TkRoundClose, TkIs, Body, TkEnd
#line 130 "Language.y"
    {
        CurrentSemanticValue = new RoutineDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-7], null, (ListNode<ParameterDeclarationNode>)ValueStack[ValueStack.Depth-5], (BodyNode)ValueStack[ValueStack.Depth-2]);
    }
#line default
        break;
      case 18: // Parameters -> ParameterDeclaration, TkComma, Parameters
#line 137 "Language.y"
                                          { CurrentSemanticValue = new ListNode<ParameterDeclarationNode>((ParameterDeclarationNode)ValueStack[ValueStack.Depth-3], (ListNode<ParameterDeclarationNode>?)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // Parameters -> ParameterDeclaration
#line 138 "Language.y"
                       { CurrentSemanticValue = new ListNode<ParameterDeclarationNode>((ParameterDeclarationNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 20: // ParameterDeclaration -> Identifier, TkColon, Type
#line 143 "Language.y"
                          { CurrentSemanticValue = new ParameterDeclarationNode((IdentifierNode)ValueStack[ValueStack.Depth-3], (TypeNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // Type -> Identifier
#line 151 "Language.y"
             { CurrentSemanticValue = new TypeNode(TypeKind.UserDefined, (IdentifierNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 25: // PrimitiveType -> TkInt
#line 155 "Language.y"
        { CurrentSemanticValue = new TypeNode(TypeKind.Integer, new IdentifierNode(Lexer.CurrentToken)); }
#line default
        break;
      case 26: // PrimitiveType -> TkReal
#line 156 "Language.y"
         { CurrentSemanticValue = new TypeNode(TypeKind.Real, new IdentifierNode(Lexer.CurrentToken)); }
#line default
        break;
      case 27: // PrimitiveType -> TkBool
#line 157 "Language.y"
         { CurrentSemanticValue = new TypeNode(TypeKind.Boolean, new IdentifierNode(Lexer.CurrentToken)); }
#line default
        break;
      case 28: // RecordType -> TkRecord, TkCurlyOpen, VariableDeclarations, TkCurlyClose, TkEnd
#line 162 "Language.y"
                                                               { CurrentSemanticValue = new RecordTypeNode((IdentifierNode)ValueStack[ValueStack.Depth-5], (ListNode<VariableDeclarationNode>)ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 29: // ArrayType -> TkArray, TkSquareOpen, Expression, TkSquareClose, Type
#line 167 "Language.y"
                                                     { CurrentSemanticValue = new ArrayTypeNode((IdentifierNode)ValueStack[ValueStack.Depth-5], (TypeNode)ValueStack[ValueStack.Depth-1], (ExpressionNode)ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 30: // ArrayType -> TkArray, TkSquareOpen, TkSquareClose, Type
#line 168 "Language.y"
                                          { CurrentSemanticValue = new ArrayTypeNode((IdentifierNode)ValueStack[ValueStack.Depth-4], (TypeNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 31: // Body -> /* empty */
#line 174 "Language.y"
              { CurrentSemanticValue = new BodyNode(); }
#line default
        break;
      case 32: // Body -> Body, SimpleDeclaration
#line 175 "Language.y"
                         { CurrentSemanticValue = new BodyNode((SimpleDeclarationNode)ValueStack[ValueStack.Depth-1], (BodyNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 33: // Body -> Body, Statement, TkSemicolon
#line 176 "Language.y"
                             { CurrentSemanticValue = new BodyNode((StatementNode)ValueStack[ValueStack.Depth-2], (BodyNode)ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 34: // Body -> SimpleDeclaration
#line 177 "Language.y"
                    { CurrentSemanticValue = new BodyNode((SimpleDeclarationNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 35: // Body -> Statement, TkSemicolon
#line 178 "Language.y"
                        { CurrentSemanticValue = new BodyNode((StatementNode)ValueStack[ValueStack.Depth-2], null); }
#line default
        break;
      case 42: // Assignment -> ModifiablePrimary, TkAssign, Expression
#line 192 "Language.y"
                                        { CurrentSemanticValue = new AssignmentNode((ModifiablePrimaryNode)ValueStack[ValueStack.Depth-3], (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 43: // RoutineCall -> Identifier, TkRoundOpen, ExpressionList, TkRoundClose
#line 197 "Language.y"
                                                     { CurrentSemanticValue = new RoutineCallNode((IdentifierNode)ValueStack[ValueStack.Depth-4], (ListNode<ExpressionNode>)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 44: // RoutineCall -> Identifier
#line 198 "Language.y"
             { CurrentSemanticValue = new RoutineCallNode((IdentifierNode)ValueStack[ValueStack.Depth-1], new ListNode<ExpressionNode>()); }
#line default
        break;
      case 45: // ExpressionList -> ExpressionList, TkComma, Expression
#line 203 "Language.y"
                                    { CurrentSemanticValue = new ListNode<ExpressionNode>((ExpressionNode)ValueStack[ValueStack.Depth-1], (ListNode<ExpressionNode>)ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 46: // ExpressionList -> Expression
#line 204 "Language.y"
             { CurrentSemanticValue = new ListNode<ExpressionNode>((ExpressionNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 47: // WhileLoop -> TkWhile, Expression, TkLoop, Body, TkEnd
#line 209 "Language.y"
                                       { CurrentSemanticValue = new WhileLoopNode((ExpressionNode)ValueStack[ValueStack.Depth-4], (BodyNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 48: // ForLoop -> TkFor, Identifier, Range, TkLoop, Body, TkEnd
#line 214 "Language.y"
                                           { CurrentSemanticValue = new ForLoopNode((IdentifierNode)ValueStack[ValueStack.Depth-5], (RangeNode)ValueStack[ValueStack.Depth-4], (BodyNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 49: // Range -> TkIn, TkReverse, Expression, TkRange, Expression
#line 219 "Language.y"
                                               { CurrentSemanticValue = new RangeNode((ExpressionNode)ValueStack[ValueStack.Depth-3], (ExpressionNode)ValueStack[ValueStack.Depth-1], true); }
#line default
        break;
      case 50: // Range -> TkIn, Expression, TkRange, Expression
#line 220 "Language.y"
                                     { CurrentSemanticValue = new RangeNode((ExpressionNode)ValueStack[ValueStack.Depth-3], (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 51: // IfStatement -> TkIf, Expression, TkThen, Body, TkElse, Body, TkEnd
#line 225 "Language.y"
                                                { CurrentSemanticValue = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-6], (BodyNode)ValueStack[ValueStack.Depth-4], (BodyNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 52: // IfStatement -> TkIf, Expression, TkThen, Body, TkEnd
#line 226 "Language.y"
                                    { CurrentSemanticValue = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-4], (BodyNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 53: // ReturnStatement -> TkReturn, Expression
#line 231 "Language.y"
                      { CurrentSemanticValue = new ReturnNode((ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 54: // ReturnStatement -> TkReturn
#line 232 "Language.y"
           { CurrentSemanticValue = new ReturnNode(); }
#line default
        break;
      case 55: // Expression -> Expression, TkAnd, Relation
#line 237 "Language.y"
                            { CurrentSemanticValue = new ExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.And, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 56: // Expression -> Expression, TkOr, Relation
#line 238 "Language.y"
                           { CurrentSemanticValue = new ExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Or, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 57: // Expression -> Expression, TkXor, Relation
#line 239 "Language.y"
                            { CurrentSemanticValue = new ExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Xor, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 58: // Expression -> Relation
#line 240 "Language.y"
           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 59: // Relation -> Simple, TkLess, Simple
#line 245 "Language.y"
                       { CurrentSemanticValue = new RelationNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Less, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 60: // Relation -> Simple, TkLeq, Simple
#line 246 "Language.y"
                      { CurrentSemanticValue = new RelationNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.LessOrEqual, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 61: // Relation -> Simple, TkGreater, Simple
#line 247 "Language.y"
                          { CurrentSemanticValue = new RelationNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Greater, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 62: // Relation -> Simple, TkGeq, Simple
#line 248 "Language.y"
                      { CurrentSemanticValue = new RelationNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.GreaterOrEqual, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 63: // Relation -> Simple, TkEqual, Simple
#line 249 "Language.y"
                        { CurrentSemanticValue = new RelationNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Equal, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 64: // Relation -> Simple, TkNotEqual, Simple
#line 250 "Language.y"
                           { CurrentSemanticValue = new RelationNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.NotEqual, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 65: // Relation -> Simple
#line 251 "Language.y"
         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 66: // Simple -> Simple, TkMultiply, Factor
#line 256 "Language.y"
                           { CurrentSemanticValue = new SimpleNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Multiply, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 67: // Simple -> Simple, TkDivide, Factor
#line 257 "Language.y"
                         { CurrentSemanticValue = new SimpleNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Divide, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 68: // Simple -> Simple, TkPercent, Factor
#line 258 "Language.y"
                          { CurrentSemanticValue = new SimpleNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Modulo, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // Simple -> Factor
#line 259 "Language.y"
         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 70: // Factor -> Factor, TkMinus, Summand
#line 264 "Language.y"
                         { CurrentSemanticValue = new FactorNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Minus, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 71: // Factor -> Factor, TkPlus, Summand
#line 265 "Language.y"
                        { CurrentSemanticValue = new FactorNode((ExpressionNode)ValueStack[ValueStack.Depth-3], new OperatorNode(Operator.Plus, Lexer.CurrentToken), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 72: // Factor -> Summand
#line 266 "Language.y"
          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 73: // Summand -> Primary
#line 270 "Language.y"
          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 74: // Summand -> TkRoundOpen, Expression, TkRoundClose
#line 271 "Language.y"
                                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 75: // Primary -> TkIntLiteral
#line 275 "Language.y"
               { CurrentSemanticValue = new LiteralNode(LiteralKind.Integer, Lexer.CurrentToken); }
#line default
        break;
      case 76: // Primary -> TkRealLiteral
#line 276 "Language.y"
                { CurrentSemanticValue = new LiteralNode(LiteralKind.Real, Lexer.CurrentToken); }
#line default
        break;
      case 77: // Primary -> TkBoolLiteral
#line 277 "Language.y"
                { CurrentSemanticValue = new LiteralNode(LiteralKind.Boolean, Lexer.CurrentToken); }
#line default
        break;
      case 79: // ModifiablePrimary -> ModifiablePrimary, TkDot, Identifier
#line 283 "Language.y"
                                     { CurrentSemanticValue = new ModifiablePrimaryNode((IdentifierNode)ValueStack[ValueStack.Depth-1], (ModifiablePrimaryNode)ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 80: // ModifiablePrimary -> ModifiablePrimary, TkSquareOpen, Expression, TkSquareClose
#line 284 "Language.y"
                                                          { CurrentSemanticValue = new ModifiablePrimaryNode(null, (ModifiablePrimaryNode)ValueStack[ValueStack.Depth-4], (ExpressionNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 81: // ModifiablePrimary -> Identifier
#line 285 "Language.y"
             { CurrentSemanticValue = new ModifiablePrimaryNode((IdentifierNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // Identifier -> TkIdentifier
#line 289 "Language.y"
               { CurrentSemanticValue = new IdentifierNode(Lexer.CurrentToken); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 293 "Language.y"
#line default
}
}
